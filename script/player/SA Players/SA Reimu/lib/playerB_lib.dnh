/* -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
	Player Recreation Project: SA Reimu
	by Frenticpony
	
	playerB_lib.dnh v1.0
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= */

let optionX1 = 64;
let optionY1 = 144;
let optionX2 = 80;
let optionY2 = 160;

let opPos_levelOne   = [ 
	[0, -32, 0, -20], 
	[0, 0, 0, 0], 
	[0, 0, 0, 0], 
	[0, 0, 0, 0] ];
	
let opPos_levelTwo   = [ 
	[-32, 0, -16, -20], 
	[32, 0, 16, -20],  
	[0, 0, 0, 0], 
	[0, 0, 0, 0] ];
	
let opPos_levelThree = [ 
	[-32, 0, -16, -20], 
	[32, 0, 16, -20], 
	[0, -32, 0, -30], 
	[0, 0, 0, 0] ];
	
let opPos_levelFour  = [ 
	[-32, 0, -16, -20], 
	[32, 0, 16, -20], 
	[-16, -32, -8, -30], 
	[16, -32, 8, -30] ];

let player_maxPower = 400;

/* ---------------------------------------

--------------------------------------- */

let opPos_none   = [ [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0] ];
let opPos_current = opPos_none;
let opPos_Array = [opPos_none, opPos_levelOne, opPos_levelTwo, opPos_levelThree, opPos_levelFour];

let optionOne = 0;
let optionTwo = 0;
let optionThree = 0;
let optionFour = 0;

let optionArray = [GetPlayerObjectID, 0, 0, 0, 0];

function ExclFire()
{
	ShotSE(3);
	alternative(powerState)
	case(0)
	{
		MainFire(0, 3, 16, -10, 16, 24, 270, 1);
		MainFire(0, 3, 16, 10, 16, 24, 270, 1);
	}
	case(1)
	{
		MainFire(0, 3, 16, -10, 16, 24, 270, 1);
		MainFire(0, 3, 16, 10, 16, 24, 270, 1);
		
		OptionFire(1, 16, 7, 0, 0, 8, 270, 1);
	}
	case(2)
	{
		MainFire(0, 3, 14, -10, 16, 24, 270, 1);
		MainFire(0, 3, 14, 10, 16, 24, 270, 1);
		
		OptionFire(1, 16, 7, 0, 0, 8, 270, 1);
		OptionFire(2, 16, 7, 0, 0, 8, 270, 1);
	}
	case(3)
	{
		MainFire(0, 3, 12, -10, 16, 24, 270, 1);
		MainFire(0, 3, 12, 10, 16, 24, 270, 1);
		
		OptionFire(1, 16, 6, 0, 0, 8, 270, 1);
		OptionFire(2, 16, 7, 0, 0, 8, 270, 1);
		OptionFire(3, 16, 6, 0, 0, 8, 270, 1);
	}
	case(4, 5)
	{
		MainFire(0, 3, 10, -10, 16, 24, 270, 1);
		MainFire(0, 3, 10, 10, 16, 24, 270, 1);
		
		OptionFire(1, 16, 6, 0, 0, 8, 270, 1);
		OptionFire(2, 16, 6, 0, 0, 8, 270, 1);
		OptionFire(3, 16, 6, 0, 0, 8, 270, 1);
		OptionFire(4, 16, 6, 0, 0, 8, 270, 1);
	}
}

function InitExclPlayer()
{

}

function ResetExclPlayer()
{

}

function MainLoopExcl()
{
	UpdateOptionMovePosition(optionOne, 0);
	UpdateOptionMovePosition(optionTwo, 1);
	UpdateOptionMovePosition(optionThree, 2);
	UpdateOptionMovePosition(optionFour, 3);
	
	ExclFire();
}


function OptionFire(op_obj, rate, damage, offsetX, offsetY, speed, angle, pene)
{
	let loc_op = optionArray[op_obj];
	if(canPlayerFire == true && !isPlayerDead)
	{
		if(CheckModulo(globalFireTimer, rate) == true)
		{
			Fire();
		}
	}
	
	function Fire()
	{
		CreateHomingPlayerShot(round(ObjRender_GetX(loc_op)) + offsetX, round(ObjRender_GetY(loc_op)) + offsetY, speed, angle, damage * player_DamageMultiplier, pene);
	}
}

task InitOptions()
{
	optionOne = CreateOptionObject();
	optionTwo = CreateOptionObject();
	optionThree = CreateOptionObject();
	optionFour = CreateOptionObject();
	
	OptionDrawLoop(optionOne, 0);
	OptionDrawLoop(optionTwo, 0);
	OptionDrawLoop(optionThree, 0);
	OptionDrawLoop(optionFour, 0);
}

function FinishOptions()
{
	ascent(i in 0..length(optionArray))
	{
		if(optionArray[i] != 0)
		{
			OptionDeathEffect(optionArray[i]);
			OptionFinishFlags(optionArray[i]);
		}
	}
}

function CreateOptionObject()
{
	let op_obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	ObjRender_SetPosition(op_obj, GetPlayerX, GetPlayerY, 0);
	Obj_SetValue(op_obj, "ACTIVE", 0);
	Obj_SetValue(op_obj, "ANIM", 0);
	return op_obj;
}

function UpdateOptionMovePosition(op_obj, loc_pos)
{
	let distancetopoint = Obj_GetValueD(op_obj, "dis2p", 0);
	let directiontopoint = Obj_GetValueD(op_obj, "dir2p", 0);

	let destinationx = Obj_GetValueD(op_obj, "dx", 0);
	let destinationy = Obj_GetValueD(op_obj, "dy", 0);

	alternative(Obj_GetValueD(op_obj, "ACTIVE", 0))
	case(-1)
	{
		if(GetVirtualKeyState(VK_SLOWMOVE) == KEY_HOLD)
		{
			destinationx = GetPlayerX + opPos_current[loc_pos][2];
			destinationy = GetPlayerY + opPos_current[loc_pos][3];
		}
		else
		{
			destinationx = GetPlayerX + opPos_current[loc_pos][0];
			destinationy = GetPlayerY + opPos_current[loc_pos][1];
		}
		ObjRender_SetPosition(op_obj, destinationx, destinationy, 1);
		Obj_SetValue(op_obj, "ACTIVE", 1);
	}
	case(0)
	{
		
	}
	case(1)
	{
		distancetopoint = ((destinationx - ObjRender_GetX(op_obj))^2 + (destinationy - ObjRender_GetY(op_obj))^2)^0.5;
		directiontopoint = atan2(destinationy - ObjRender_GetY(op_obj),destinationx - ObjRender_GetX(op_obj));
		if(distancetopoint >= 1)
		{
			ObjRender_SetPosition(op_obj, ObjRender_GetX(op_obj) + cos(directiontopoint) * distancetopoint * 0.4, ObjRender_GetY(op_obj) + sin(directiontopoint) * distancetopoint * 0.4, 1);
		}
		else
		{
			ObjRender_SetPosition(op_obj, destinationx, destinationy, 1);
		}

		if(GetVirtualKeyState(VK_SLOWMOVE) == KEY_HOLD)
		{
			destinationx = GetPlayerX + opPos_current[loc_pos][2];
			destinationy = GetPlayerY + opPos_current[loc_pos][3];
		}
		else
		{
			destinationx = GetPlayerX + opPos_current[loc_pos][0];
			destinationy = GetPlayerY + opPos_current[loc_pos][1];
		}
	}
	
	Obj_SetValue(op_obj, "dis2p", distancetopoint);
	Obj_SetValue(op_obj, "dir2p", directiontopoint);
	Obj_SetValue(op_obj, "dx", destinationx);
	Obj_SetValue(op_obj, "dy", destinationy);
}

task OptionDrawLoop(op_obj, angle)
{
	let orbit = 0;
	let orbitB = 0;
	let count = 0;
	let animFrame = 0;
	let animState = 0;
	let animScale = 0.25;
	let animScaleMod = 0.32;
	
	let optionDraw = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(optionDraw, img_pl00);
	ObjSprite2D_SetSourceRect(optionDraw, optionX1, optionY1, optionX2, optionY2);
	ObjSprite2D_SetDestRect(optionDraw, -7.5, -7.5, 8.5, 8.5);
	ObjRender_SetBlendType(optionDraw, BLEND_ALPHA);
	Obj_SetRenderPriorityI(optionDraw, 25);
	
	let optioneffect = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(optioneffect, img_pl00);
	ObjSprite2D_SetSourceRect(optioneffect, optionX1, optionY1, optionX2, optionY2);
	ObjSprite2D_SetDestRect(optioneffect, -7.5, -7.5, 8.5, 8.5);
	ObjRender_SetBlendType(optioneffect, BLEND_ADD_ARGB);
	Obj_SetRenderPriorityI(optioneffect, 24);
	
	while(!Obj_IsDeleted(op_obj))
	{
		if(playerPower != player_maxPower)
		{
			ObjRender_SetAlpha(optioneffect, 0);
		}
		else
		{
			ObjRender_SetAlpha(optioneffect, 150);
		}
		
		if(Obj_GetValueD(op_obj, "RESET", false) == true)
		{
			animState = 0;
			animFrame = 0;
			animScale = 0.25;
			animScaleMod = 0.2;
			orbitB = 0;
			Obj_SetValue(op_obj, "RESET", false);
		}
		
		alternative(Obj_GetValueD(op_obj, "ACTIVE", 0))
		case(-1, 0)
		{
			ObjRender_SetAlpha(optionDraw, 0);
			ObjRender_SetAlpha(optioneffect, 0);
		}
		case(1)
		{
			if(animState == 0)
			{
				if(animFrame == 14)
				{
					animState = 1;
				}
				count = 0;
				animScale += animScaleMod;
				animScaleMod -= 0.021;
				orbitB += 13;
				ObjRender_SetScaleXYZ(optionDraw, animScale, animScale, 1);
				ObjRender_SetBlendType(optionDraw, BLEND_ADD_ARGB);
				animFrame++;
			}
			else
			{
				animScale = 1;
				ObjRender_SetScaleXYZ(optionDraw, 0.95, 0.95, 1);
				ObjRender_SetBlendType(optionDraw, BLEND_ALPHA);
				count++;
			}
			ObjRender_SetAlpha(optionDraw, 255);
		}

		ObjRender_SetAngleZ(optioneffect, orbit);
		ObjRender_SetAngleZ(optionDraw, orbitB);
		
		ObjRender_SetScaleXYZ(optioneffect, 1.52, 1.52, 1);
		
		ObjRender_SetPosition(optionDraw, ObjRender_GetX(op_obj), ObjRender_GetY(op_obj), 1);
		ObjRender_SetPosition(optioneffect, ObjRender_GetX(op_obj), ObjRender_GetY(op_obj), 1);
		
		orbit -= 6;
		orbitB += 6;
		yield;
	}
	let scale = 1;
	while(scale > 0)
	{
		scale -= 0.25;
		ObjRender_SetScaleY(optionDraw, scale/2);
		ObjRender_SetScaleX(optioneffect, scale);
		yield;
	}
	Obj_Delete(optionDraw);
	Obj_Delete(optioneffect);
}

task OptionDeathEffect(op_obj)
{
	let eff_scaleX = 1;
	let eff_scaleY = 1;
	let eff_angle = 0;
	let optionEffect = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(optionEffect, img_pl00);
	ObjSprite2D_SetSourceRect(optionEffect, optionX1, optionY1, optionX2, optionY2);
	ObjSprite2D_SetDestRect(optionEffect, -7.5, -7.5, 8.5, 8.5);
	ObjRender_SetBlendType(optionEffect, BLEND_ADD_ARGB);
	Obj_SetRenderPriorityI(optionEffect, 25);
	ObjRender_SetPosition(optionEffect, ObjRender_GetX(op_obj), ObjRender_GetY(op_obj), 1);
	
	while(eff_scaleX > 0)
	{
		eff_scaleX -= 0.1;
		eff_scaleY += 0.1;
		eff_angle += 4;
		ObjRender_SetScaleXYZ(optionEffect, eff_scaleX, eff_scaleY, 1);
		ObjRender_SetAngleZ(optionEffect, eff_angle);
		yield;
	}
	Obj_Delete(optionEffect);
}
	
function OptionFinishFlags(op_obj)
{
	Obj_SetValue(op_obj, "ACTIVE", 0);
}

function OptionResetFlags(op_obj)
{
	Obj_SetValue(op_obj, "ACTIVE", -1);
	Obj_SetValue(op_obj, "RESET", true);
}


task SpellcardBomb()
{
	let objManage = GetSpellManageObject;
	let bombX = ObjMove_GetX(GetPlayerID);
	let bombY = ObjMove_GetY(GetPlayerID);
	
	let Spell_Time = 0;
	let TotalSpellTime = 200;
	
	PlaySE(se_spark);
	PlaySE(se_slash);

	SpellcardBG();
	SetPlayerInvincibilityFrame(270);
	while(Spell_Time < TotalSpellTime)
	{
		Spell_Time++;
		SpellcardHitbox;
		yield;
	}

	PlaySE(se_slash);
	Obj_Delete(objManage);
	
	function SpellcardHitbox
	{
		let ar = GetShotIdInCircleA1(bombX, bombY, 96);
		ascent(i in 0..length(ar))
		{
			if(!ObjShot_IsSpellResist(ar[i]))
			{
				alternative(bomb_HomingShotType)
				case(1)
				{
					CreateHomingPlayerShot_c(ObjMove_GetX(ar[i]), ObjMove_GetY(ar[i]), 10, atan2(ObjMove_GetY(ar[i]) - bombY, ObjMove_GetX(ar[i]) - bombX), 1 * player_BombDamageMultiplier, 1);
				}
				case(2)
				{
					CreateHomingPlayerShot_b(ObjMove_GetX(ar[i]), ObjMove_GetY(ar[i]), 10, atan2(ObjMove_GetY(ar[i]) - bombY, ObjMove_GetX(ar[i]) - bombX), 1 * player_BombDamageMultiplier, 1);
				}
				ObjShot_SetDeleteFrame(ar[i], 0);
			}
		}
	}
	
	task SpellcardBG()
	{
		let bombTime = 0;
		let maxBombTime = 200;
		
		let bgTime = 0;
		let bgScale = 1;
		
		let countVertex = 64;
		
		let texMod = 0;

		let radiusA = 0;
		let radiusB = 0;
		
		let objBG = InitVertex();
		
		ObjRender_SetPosition(objBG, bombX, bombY, 0);
		ObjRender_SetColor(objBG, 128, 128, 255);
		ObjRender_SetScaleX(objBG, -1);
		
		EffCircle();
		while(bombTime < maxBombTime)
		{
			DrawVertex(objBG, radiusA, radiusB);
			UpdateVertexUVT(objBG, radiusA, texMod);
			if(radiusA < 96)
			{
				radiusA += 4;
			}
			else if(radiusA > 96)
			{
				radiusA = 96;
			}
			texMod += 5.5;
			bombTime++;
			yield;
		}
		while(bgScale > 0)
		{
			bgScale = InterpolateValue(1, 0, bgTime, IP_DECELERATE, 16);
			ObjRender_SetScaleXYZ(objBG, -bgScale, bgScale, 1);
			bgTime++;
			yield;
		}
		Obj_Delete(objBG);
		
		task EffCircle()
		{
			let loc_angA = 270;
			let loc_angB = 270;
			let loc_angMod = 360/20;
			ascent(i in 0..11)
			{
				if(i == 0)
				{
					CreateEffectParticle(bombX + 96*cos(loc_angA), bombY + 96*sin(loc_angA), 1);
				}
				else if(i == 10)
				{
					CreateEffectParticle(bombX + 96*cos(loc_angB), bombY + 96*sin(loc_angB), -1);
				}
				else
				{
					CreateEffectParticle(bombX + 96*cos(loc_angA), bombY + 96*sin(loc_angA), 1);
					CreateEffectParticle(bombX + 96*cos(loc_angB), bombY + 96*sin(loc_angB), -1);
				}
				loc_angA += loc_angMod;
				loc_angB -= loc_angMod;
				yield;
			}
		}
		
		task CreateEffectParticle(x, y, spinDir) //8 fade
		{
			let loc_rotate = 3.5 * spinDir;
			let loc_angle = 0;
			let effScale = 0.32;
			let effFrame = 0;
			let objEff = ObjPrim_Create(OBJ_SPRITE_2D);
			ObjPrim_SetTexture(objEff, img_pl00b);
			ObjSprite2D_SetSourceRect(objEff, 0, 192, 64, 256);
			ObjSprite2D_SetDestRect(objEff, -31.5, -31.5, 32.5, 32.5);
			ObjRender_SetPosition(objEff, x, y, 0);
			Obj_SetRenderPriorityI(objEff, bg_renderPriority);
			while(bombTime < maxBombTime)
			{
				ObjRender_SetAngleZ(objEff, loc_angle);
				ObjRender_SetScaleXYZ(objEff, effScale, effScale, 1);
				loc_angle += loc_rotate;
				if(effFrame < 16)
				{
					effScale = InterpolateValue(0.32, 1, effFrame, IP_SMOOTHSTEP, 16);
				}
				else
				{
					effScale = 1 + (sin(effFrame*10) * 0.05);
				}
				effFrame++;
				yield;
			}
			effFrame = 0;
			while(effScale > 0)
			{
				effScale = InterpolateValue(1, 0, effFrame, IP_LINEAR, 8);
				ObjRender_SetScaleXYZ(objEff, effScale, effScale, 1);
				effFrame++;
				yield;
			}
			Obj_Delete(objEff);
		}
		
		function InitVertex()
		{
			let store = 0;
			
			let objVert = ObjPrim_Create(OBJ_PRIMITIVE_2D);
			ObjPrim_SetPrimitiveType(objVert, PRIMITIVE_TRIANGLESTRIP);
			ObjPrim_SetVertexCount(objVert, countVertex + 2);
			ObjRender_SetBlendType(objVert, BLEND_ALPHA);
			ObjPrim_SetTexture(objVert, img_pl00d);
			Obj_SetRenderPriorityI(objVert, bg_renderPriority);
			ObjRender_SetAngleZ(objVert, 270);
			
			loop((countVertex / 2) + 2)
			{
				let left = store * 4;
				ObjPrim_SetVertexUVT(objVert, store, left, 0);
				ObjPrim_SetVertexUVT(objVert, store + 1, left + 4, countVertex);	
				store += 2;
			}
			return objVert;
		}
		
		function UpdateVertexUVT(obj, radius, textureMod)
		{
			ascent(i in 0..countVertex)
			{
				let indexVert = i * 2;
				ObjPrim_SetVertexUVT(objBG, indexVert, 
					(142) + 32*i,
					(0 - radiusA) + texMod);
				
				
				ObjPrim_SetVertexUVT(objBG, indexVert + 1, 
					(142 + 32) + 32*i,
					(64) + texMod);

			}
		}
		
		function DrawVertex(obj, radA, radB) //16 fade
		{
			let angle = 0;
			let loc_indexVert = 0;
			loop((countVertex / 2) + 2)
			{
				let vx1 = radA * cos(angle);
				let vy1 = radA * sin(angle);
				ObjPrim_SetVertexPosition(obj, loc_indexVert, vx1, vy1, 0);
				ObjPrim_SetVertexAlpha(obj, loc_indexVert, 256);
				
				let vx2 = radB * cos(angle);
				let vy2 = radB * sin(angle);
				ObjPrim_SetVertexPosition(obj, loc_indexVert + 1, vx2, vy2, 0);
				ObjPrim_SetVertexAlpha(obj, loc_indexVert + 1, 256);
				
				angle += (360/(countVertex/2));
				loc_indexVert += 2;
			}
		}
	}

}


task PowerCheck(didGet, op_deleteType)
{
	if(playerPower >= 0 && playerPower < 100 && powerState != 0)
	{
		powerState = 0;
		opPos_current = opPos_Array[powerState];
		alternative(op_deleteType)
		case(0)
		{
			ascent(i in 1..length(optionArray))
			{
				if(optionArray[i] != 0)
				{
					OptionFinishFlags(optionArray[i]);
				}
			}
		}
		case(1)
		{
			OptionDeathEffect(optionArray[1]);
			ascent(i in 1..length(optionArray))
			{
				if(optionArray[i] != 0)
				{
					OptionFinishFlags(optionArray[i]);
				}
			}
		}
		case(2)
		{
			ascent(i in 1..length(optionArray))
			{
				if(optionArray[i] != 0)
				{
					OptionDeathEffect(optionArray[i]);
					OptionFinishFlags(optionArray[i]);
				}
			}
		}
		optionArray = [GetPlayerObjectID, 0, 0, 0, 0];
	}
	else if(playerPower >= 100 && playerPower < 200 && powerState != 1)
	{
		powerState = 1;
		opPos_current = opPos_Array[powerState];
		if(didGet == 1)
		{
			PlaySE(se_powerup1);
		}
		alternative(op_deleteType)
		case(0)
		{
			ascent(i in 1..length(optionArray))
			{
				if(optionArray[i] != 0)
				{
					OptionFinishFlags(optionArray[i]);
				}
			}
		}
		case(1)
		{
			OptionDeathEffect(optionArray[2]);
			ascent(i in 1..length(optionArray))
			{
				if(optionArray[i] != 0)
				{
					OptionFinishFlags(optionArray[i]);
				}
			}
		}
		case(2)
		{
			ascent(i in 1..length(optionArray))
			{
				if(optionArray[i] != 0)
				{
					OptionDeathEffect(optionArray[i]);
					OptionFinishFlags(optionArray[i]);
				}
			}
		}
		OptionResetFlags(optionOne);
		optionArray = [GetPlayerObjectID, optionOne, 0, 0, 0];
	}
	else if(playerPower >= 200 && playerPower < 300 && powerState != 2)
	{
		powerState = 2;
		opPos_current = opPos_Array[powerState];
		if(didGet == 1)
		{
			PlaySE(se_powerup1);
		}
		alternative(op_deleteType)
		case(0)
		{
			ascent(i in 1..length(optionArray))
			{
				if(optionArray[i] != 0)
				{
					OptionFinishFlags(optionArray[i]);
				}
			}
		}
		case(1)
		{
			OptionDeathEffect(optionArray[3]);
			ascent(i in 1..length(optionArray))
			{
				if(optionArray[i] != 0)
				{
					OptionFinishFlags(optionArray[i]);
				}
			}
		}
		case(2)
		{
			ascent(i in 1..length(optionArray))
			{
				if(optionArray[i] != 0)
				{
					OptionDeathEffect(optionArray[i]);
					OptionFinishFlags(optionArray[i]);
				}
			}
		}
		OptionResetFlags(optionOne);
		OptionResetFlags(optionTwo);
		optionArray = [GetPlayerObjectID, optionOne, optionTwo, 0, 0];
	}
	else if(playerPower >= 300 && playerPower < 400 && powerState != 3)
	{
		powerState = 3;
		opPos_current = opPos_Array[powerState];
		if(didGet == 1)
		{
			PlaySE(se_powerup1);
		}
		alternative(op_deleteType)
		case(0)
		{
			ascent(i in 1..length(optionArray))
			{
				if(optionArray[i] != 0)
				{
					OptionFinishFlags(optionArray[i]);
				}
			}
		}
		case(1)
		{
			OptionDeathEffect(optionArray[4]);
			ascent(i in 1..length(optionArray))
			{
				if(optionArray[i] != 0)
				{
					OptionFinishFlags(optionArray[i]);
				}
			}
		}
		case(2)
		{
			ascent(i in 1..length(optionArray))
			{
				if(optionArray[i] != 0)
				{
					OptionDeathEffect(optionArray[i]);
					OptionFinishFlags(optionArray[i]);
				}
			}
		}
		OptionResetFlags(optionOne);
		OptionResetFlags(optionTwo);
		OptionResetFlags(optionThree);
		optionArray = [GetPlayerObjectID, optionOne, optionTwo, optionThree, 0];
	}
	else if(playerPower >= 400 && powerState != 4)
	{
		powerState = 4;
		opPos_current = opPos_Array[powerState];
		if(didGet == 1)
		{
			PlaySE(se_powerup1);
		}
		
		if(didGet != -1)
		{
			alternative(op_deleteType)
			case(0)
			{
				ascent(i in 1..length(optionArray))
				{
					if(optionArray[i] != 0)
					{
						OptionFinishFlags(optionArray[i]);
					}
				}
			}
			case(2)
			{
				ascent(i in 1..length(optionArray))
				{
					if(optionArray[i] != 0)
					{
						OptionDeathEffect(optionArray[i]);
						OptionFinishFlags(optionArray[i]);
					}
				}
			}
			OptionResetFlags(optionOne);
			OptionResetFlags(optionTwo);
			OptionResetFlags(optionThree);
			OptionResetFlags(optionFour);
			optionArray = [GetPlayerObjectID, optionOne, optionTwo, optionThree, optionFour];
		}
	}
}

task CreateHomingPlayerShot(x, y, speed, angle, dmg, pene)
{
	if(!IsPermitPlayerShot)
	{
		return;
	}
	
	task ShotFade(x, y)
	{
		let frame = 0;
		let effAlpha = 250;
		let effScale = 1;
		
		let fadeEff = ObjPrim_Create(OBJ_SPRITE_2D);
		ObjPrim_SetTexture(fadeEff, img_pl00_shot);
		ObjSprite2D_SetSourceRect(fadeEff, 1, 65, 32, 96);
		ObjSprite2D_SetDestCenter(fadeEff);
	
		ObjRender_SetPosition(fadeEff, x, y, 1);
		ObjRender_SetAngleZ(fadeEff, rand(0, 360));
		ObjRender_SetColorHSV(fadeEff, 218, 0, 255);
		
		Obj_SetRenderPriorityI(fadeEff, 46);
		
		while(frame != 9) //9, every 2
		{
			effAlpha = InterpolateValue(150, 0, frame, IP_LINEAR, 9);
			effScale = InterpolateValue(1, 1.75, frame, IP_LINEAR, 9);
			
			ObjRender_SetScaleXYZ(fadeEff, effScale, effScale, 0);
			ObjRender_SetAlpha(fadeEff, effAlpha);
			frame++;
			yield;
		}
		Obj_Delete(fadeEff);
	}
	
	let loc_x;
	let loc_y;
	
	let effFrame = 0;
	
	let obj = CreatePlayerShotA1(x, y, speed, angle, dmg, 99999, 2);
	ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
	Obj_SetRenderPriorityI(obj, 47);
	
	//------------------------------------
	
	let home_minAngle = 90;
	
	let home_angModMax = 2;
	let home_angModMin = 0.1;
	
	let home_minDistance = 250;
	let home_minDistance2 = 84;
	
	let home_speedModUp = 0.075;
	let home_speedModDown = 0.075;
	
	let home_speedMax = 20;
	let home_speedMin = 1.5;
	
	//------------------------------------
	
	let home_ene = [-1, 0, 0, 1000];
	let home_obj = -1;
	let home_angMod = 5;

	let home_eneArray = [];
	let home_eneDistance = 0;
	
	let home_currentDistance = 0;
	let home_closeEneDistance = home_minDistance;
	
	let home_dir = 0;
	
	let home_diff = 0;
	let home_diffAbs = 0;
	
	while(!Obj_IsDeleted(obj))
	{
		loc_x = ObjMove_GetX(obj);
		loc_y = ObjMove_GetY(obj);

		home_eneArray = GetIntersectionRegistedEnemyID;
		if(length(home_eneArray) > 0)
		{
			home_closeEneDistance = home_minDistance;
			ascent(i in 0..(length(home_eneArray)))
			{
				home_eneDistance = ((loc_x - ObjMove_GetX(home_eneArray[i]))^2 + (loc_y - ObjMove_GetY(home_eneArray[i]))^2)^0.5;
				if(home_eneDistance < home_closeEneDistance)
				{
					home_closeEneDistance = home_eneDistance;
					home_obj = home_eneArray[i];
				}
			}
			if(home_obj != -1)
			{
				//home_currentDistance = ((loc_x - ObjMove_GetX(home_obj))^2 + (loc_y - ObjMove_GetY(home_obj))^2)^0.5;
				home_dir = atan2(ObjMove_GetY(home_obj) - loc_y, ObjMove_GetX(home_obj) - loc_x);
				home_diff = home_dir - angle;
				while(home_diff >= 180) { home_diff -= 360; }
				while(home_diff < -180) { home_diff += 360; }
				home_diffAbs = (|home_diff|);
				
				if(home_diffAbs < home_minAngle && home_diffAbs > 2)
				{
					if(home_closeEneDistance < InterpolateValue(home_minDistance, home_minDistance2, home_diffAbs, IP_LINEAR, home_minAngle))
					{
						home_angMod = InterpolateValue(home_angModMin, home_angModMax, home_diffAbs, IP_DECELERATE, home_minAngle);
						speed -= home_speedModDown;
						angle += home_angMod * home_diff / (home_diffAbs/2);
					}
					else
					{
						home_angMod = 0;
						speed += home_speedModUp;
					}
				}
				else
				{
					home_angMod = 0;
					speed += home_speedModUp;
				}
				
				if(home_diffAbs <= 2)
				{
					angle = home_dir;
				}
			}
			else
			{
				speed += home_speedModUp;
			}
		}
		else
		{
			speed += home_speedModUp;
		}
		
		if(speed > home_speedMax)
		{
			speed = home_speedMax;
		}
		else if(speed < home_speedMin)
		{
			speed = home_speedMin;
		}
		
		if(effFrame == 1)
		{
			ShotFade(loc_x, loc_y);
			effFrame = -1;
		}
		ObjMove_SetAngle(obj, angle);
		ObjMove_SetSpeed(obj, speed);
		effFrame++;
		yield;
	}
	//if(loc_y >= 0)
	//{
	//	ShotFade;	
	//}
}

task CreateHomingPlayerShot_b(x, y, speed, angle, dmg, pene)
{
	if(!IsPermitPlayerShot)
	{
		return;
	}
	
	function ShotFade
	{
		let frame = 0;
		
		let alpha = 255;
		let angmod = 0;
		let scale = 1;
		let inx = loc_x;
		let iny = loc_y;
		
		let fadeEff = ObjPrim_Create(OBJ_SPRITE_2D);
		ObjPrim_SetTexture(fadeEff, img_pl00_shot);
		ObjSprite2D_SetSourceRect(fadeEff, 2, 98, 31, 127);
		ObjSprite2D_SetDestCenter(fadeEff);
		ObjRender_SetBlendType(fadeEff, BLEND_ADD_ARGB);
		ObjRender_SetPosition(fadeEff, inx, iny, 1);
		ObjRender_SetAngleZ(fadeEff, angle + 90);
		Obj_SetRenderPriorityI(fadeEff, 47);
		
		while(frame < 16)
		{
			scale = InterpolateValue(1, 2, frame, IP_LINEAR, 16);
			alpha = InterpolateValue(255, 0, frame, IP_LINEAR, 16);
			ObjRender_SetScaleXYZ(fadeEff, scale, scale, 1);
			ObjRender_SetAlpha(fadeEff, 150);
			frame++;
			yield;
		}
		Obj_Delete(fadeEff);
	}
	
	task Trail(x, y)
	{
		let frame = 0;
		let effAlpha = 250;
		let effScale = 1;
		
		let fadeEff = ObjPrim_Create(OBJ_SPRITE_2D);
		ObjPrim_SetTexture(fadeEff, img_pl00_shot);
		ObjSprite2D_SetSourceRect(fadeEff, 1, 65, 32, 96);
		ObjSprite2D_SetDestCenter(fadeEff);
	
		ObjRender_SetPosition(fadeEff, x, y, 1);
		ObjRender_SetAngleZ(fadeEff, rand(0, 360));
		ObjRender_SetColorHSV(fadeEff, 218, 0, 255);
		
		Obj_SetRenderPriorityI(fadeEff, 46);
		
		while(frame != 9) //9, every 2
		{
			effAlpha = InterpolateValue(150, 0, frame, IP_LINEAR, 9);
			effScale = InterpolateValue(1, 1.75, frame, IP_LINEAR, 9);
			
			ObjRender_SetScaleXYZ(fadeEff, effScale, effScale, 0);
			ObjRender_SetAlpha(fadeEff, effAlpha);
			frame++;
			yield;
		}
		Obj_Delete(fadeEff);
	}
	
	let loc_x;
	let loc_y;
	
	let effFrame = 0;
	
	let obj = CreatePlayerShotA1(x, y, speed, angle, dmg, 1, 2);
	ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
	Obj_SetRenderPriorityI(obj, 47);
	
	//------------------------------------
	
	let home_minAngle = 180;
	
	let home_angModMax = 10;
	let home_angModMin = 1;
	
	let home_minDistance = 350;
	let home_minDistance2 = 300;
	
	let home_speedModUp = 0.075;
	let home_speedModDown = 0.075;
	
	let home_speedMax = 20;
	let home_speedMin = 1;
	
	//------------------------------------
	
	let home_ene = [-1, 0, 0, 1000];
	let home_obj = -1;
	let home_angMod = 5;

	let home_eneArray = [];
	let home_eneDistance = 0;
	
	let home_currentDistance = 0;
	let home_closeEneDistance = home_minDistance;
	
	let home_dir = 0;
	
	let home_diff = 0;
	let home_diffAbs = 0;
	
	while(!Obj_IsDeleted(obj))
	{
		loc_x = ObjMove_GetX(obj);
		loc_y = ObjMove_GetY(obj);

		home_eneArray = GetIntersectionRegistedEnemyID;
		if(length(home_eneArray) > 0)
		{
			home_closeEneDistance = home_minDistance;
			ascent(i in 0..(length(home_eneArray)))
			{
				home_eneDistance = ((loc_x - ObjMove_GetX(home_eneArray[i]))^2 + (loc_y - ObjMove_GetY(home_eneArray[i]))^2)^0.5;
				if(home_eneDistance < home_closeEneDistance)
				{
					home_closeEneDistance = home_eneDistance;
					home_obj = home_eneArray[i];
				}
			}
			if(home_obj != -1)
			{
				//home_currentDistance = ((loc_x - ObjMove_GetX(home_obj))^2 + (loc_y - ObjMove_GetY(home_obj))^2)^0.5;
				home_dir = atan2(ObjMove_GetY(home_obj) - loc_y, ObjMove_GetX(home_obj) - loc_x);
				home_diff = home_dir - angle;
				while(home_diff >= 180) { home_diff -= 360; }
				while(home_diff < -180) { home_diff += 360; }
				home_diffAbs = (|home_diff|);
				
				if(home_diffAbs < home_minAngle && home_diffAbs > 2)
				{
					if(home_closeEneDistance < InterpolateValue(home_minDistance, home_minDistance2, home_diffAbs, IP_LINEAR, home_minAngle))
					{
						home_angMod = InterpolateValue(home_angModMin, home_angModMax, home_diffAbs, IP_DECELERATE, home_minAngle);
						speed -= home_speedModDown;
						angle += home_angMod * home_diff / (home_diffAbs/2);
					}
					else
					{
						home_angMod = 0;
						speed += home_speedModUp;
					}
				}
				else
				{
					home_angMod = 0;
					speed += home_speedModUp;
				}
				
				if(home_diffAbs <= 2)
				{
					angle = home_dir;
				}
			}
			else
			{
				speed += home_speedModUp;
			}
		}
		else
		{
			speed += home_speedModUp;
		}
		
		if(speed > home_speedMax)
		{
			speed = home_speedMax;
		}
		else if(speed < home_speedMin)
		{
			speed = home_speedMin;
		}
		
		if(effFrame == 1)
		{
			Trail(loc_x, loc_y);
			effFrame = -1;
		}
		ObjMove_SetAngle(obj, angle);
		ObjMove_SetSpeed(obj, speed);
		effFrame++;
		yield;
	}
	if(loc_y >= 0)
	{
		ShotFade;	
	}
}

task CreateHomingPlayerShot_c(x, y, speed, angle, dmg, pene)
{
	if(!IsPermitPlayerShot)
	{
		return;
	}
	
	function ShotFade
	{
		let frame = 0;
		
		let alpha = 255;
		let angmod = 0;
		let scale = 1;
		let inx = loc_x;
		let iny = loc_y;
		
		let fadeEff = ObjPrim_Create(OBJ_SPRITE_2D);
		ObjPrim_SetTexture(fadeEff, img_pl00_shot);
		ObjSprite2D_SetSourceRect(fadeEff, 2, 98, 31, 127);
		ObjSprite2D_SetDestCenter(fadeEff);
		ObjRender_SetBlendType(fadeEff, BLEND_ADD_ARGB);
		ObjRender_SetPosition(fadeEff, inx, iny, 1);
		ObjRender_SetAngleZ(fadeEff, angle + 90);
		Obj_SetRenderPriorityI(fadeEff, 47);
		
		while(frame < 16)
		{
			scale = InterpolateValue(1, 2, frame, IP_LINEAR, 16);
			alpha = InterpolateValue(255, 0, frame, IP_LINEAR, 16);
			ObjRender_SetScaleXYZ(fadeEff, scale, scale, 1);
			ObjRender_SetAlpha(fadeEff, alpha);
			frame++;
			yield;
		}
		Obj_Delete(fadeEff);
	}
	
	task Trail(x, y)
	{
		let frame = 0;
		let effAlpha = 250;
		let effScale = 1;
		
		let fadeEff = ObjPrim_Create(OBJ_SPRITE_2D);
		ObjPrim_SetTexture(fadeEff, img_pl00_shot);
		ObjSprite2D_SetSourceRect(fadeEff, 1, 65, 32, 96);
		ObjSprite2D_SetDestCenter(fadeEff);
	
		ObjRender_SetPosition(fadeEff, x, y, 1);
		ObjRender_SetAngleZ(fadeEff, rand(0, 360));
		ObjRender_SetColorHSV(fadeEff, 218, 0, 255);
		
		Obj_SetRenderPriorityI(fadeEff, 46);
		
		while(frame != 9) //9, every 2
		{
			effAlpha = InterpolateValue(150, 0, frame, IP_LINEAR, 9);
			effScale = InterpolateValue(1, 1.75, frame, IP_LINEAR, 9);
			
			ObjRender_SetScaleXYZ(fadeEff, effScale, effScale, 0);
			ObjRender_SetAlpha(fadeEff, effAlpha);
			frame++;
			yield;
		}
		Obj_Delete(fadeEff);
	}
	
	let loc_x;
	let loc_y;
	
	let effFrame = 0;
	
	let obj = CreatePlayerShotA1(x, y, speed, angle, dmg, 1, 2);
	ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
	Obj_SetRenderPriorityI(obj, 47);
	
	//------------------------------------
	
	let home_minAngle = 180;
	
	let home_angModMax = 10;
	let home_angModMin = 1;
	
	let home_minDistance = 350;
	let home_minDistance2 = 300;
	
	let home_speedModUp = 0.075;
	let home_speedModDown = 0.075;
	
	let home_speedMax = 20;
	let home_speedMin = 1;
	
	//------------------------------------
	
	let home_ene = [-1, 0, 0, 1000];
	let home_obj = -1;
	let home_angMod = 5;

	let home_eneArray = [];
	let home_eneDistance = 0;
	
	let home_currentDistance = 0;
	let home_closeEneDistance = home_minDistance;
	
	let home_dir = 0;
	
	let home_diff = 0;
	let home_diffAbs = 0;
	
	while(!Obj_IsDeleted(obj))
	{
		loc_x = ObjMove_GetX(obj);
		loc_y = ObjMove_GetY(obj);

		home_eneArray = GetIntersectionRegistedEnemyID;
		if(length(home_eneArray) > 0)
		{
			home_closeEneDistance = home_minDistance;
			ascent(i in 0..(length(home_eneArray)))
			{
				home_eneDistance = ((loc_x - ObjMove_GetX(home_eneArray[i]))^2 + (loc_y - ObjMove_GetY(home_eneArray[i]))^2)^0.5;
				if(home_eneDistance < home_closeEneDistance)
				{
					home_closeEneDistance = home_eneDistance;
					home_obj = home_eneArray[i];
				}
			}
			if(home_obj != -1)
			{
				home_dir = atan2(ObjMove_GetY(home_obj) - loc_y, ObjMove_GetX(home_obj) - loc_x);
			}
		}
		ObjMove_SetAngle(obj, home_dir);
		yield;
	}
	if(loc_y >= 0)
	{
		ShotFade;	
	}
}
